/*
 * Ledger Adapter Specification
 * This is the API specification for the Ledger Adapter with whom the FinP2P node will interact in order to execute and query the underlying implementation.
 *
 * The version of the OpenAPI document: x.x.x
 * Contact: support@ownera.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.ownera.ledger.adapter.api.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.ownera.ledger.adapter.api.model.CreateAssetOperation;
import io.ownera.ledger.adapter.api.model.DepositOperation;
import io.ownera.ledger.adapter.api.model.EmptyOperation;
import io.ownera.ledger.adapter.api.model.ExecutionPlanApprovalOperation;
import io.ownera.ledger.adapter.api.model.ExecutionPlanApprovalOperationAllOfApproval;
import io.ownera.ledger.adapter.api.model.Receipt;
import io.ownera.ledger.adapter.api.model.ReceiptOperation;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import com.fasterxml.jackson.core.type.TypeReference;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import io.ownera.ledger.adapter.api.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-23T11:29:49.092442+03:00[Asia/Jerusalem]", comments = "Generator version: 7.9.0")
@JsonDeserialize(using = OperationStatusOperation.OperationStatusOperationDeserializer.class)
@JsonSerialize(using = OperationStatusOperation.OperationStatusOperationSerializer.class)
public class OperationStatusOperation extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(OperationStatusOperation.class.getName());

    public static class OperationStatusOperationSerializer extends StdSerializer<OperationStatusOperation> {
        public OperationStatusOperationSerializer(Class<OperationStatusOperation> t) {
            super(t);
        }

        public OperationStatusOperationSerializer() {
            this(null);
        }

        @Override
        public void serialize(OperationStatusOperation value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class OperationStatusOperationDeserializer extends StdDeserializer<OperationStatusOperation> {
        public OperationStatusOperationDeserializer() {
            this(OperationStatusOperation.class);
        }

        public OperationStatusOperationDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public OperationStatusOperation deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize CreateAssetOperation
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (CreateAssetOperation.class.equals(Integer.class) || CreateAssetOperation.class.equals(Long.class) || CreateAssetOperation.class.equals(Float.class) || CreateAssetOperation.class.equals(Double.class) || CreateAssetOperation.class.equals(Boolean.class) || CreateAssetOperation.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((CreateAssetOperation.class.equals(Integer.class) || CreateAssetOperation.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((CreateAssetOperation.class.equals(Float.class) || CreateAssetOperation.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (CreateAssetOperation.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (CreateAssetOperation.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(CreateAssetOperation.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'CreateAssetOperation'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'CreateAssetOperation'", e);
            }

            // deserialize DepositOperation
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (DepositOperation.class.equals(Integer.class) || DepositOperation.class.equals(Long.class) || DepositOperation.class.equals(Float.class) || DepositOperation.class.equals(Double.class) || DepositOperation.class.equals(Boolean.class) || DepositOperation.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((DepositOperation.class.equals(Integer.class) || DepositOperation.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((DepositOperation.class.equals(Float.class) || DepositOperation.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (DepositOperation.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (DepositOperation.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(DepositOperation.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'DepositOperation'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'DepositOperation'", e);
            }

            // deserialize EmptyOperation
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (EmptyOperation.class.equals(Integer.class) || EmptyOperation.class.equals(Long.class) || EmptyOperation.class.equals(Float.class) || EmptyOperation.class.equals(Double.class) || EmptyOperation.class.equals(Boolean.class) || EmptyOperation.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((EmptyOperation.class.equals(Integer.class) || EmptyOperation.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((EmptyOperation.class.equals(Float.class) || EmptyOperation.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (EmptyOperation.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (EmptyOperation.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(EmptyOperation.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'EmptyOperation'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'EmptyOperation'", e);
            }

            // deserialize ExecutionPlanApprovalOperation
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (ExecutionPlanApprovalOperation.class.equals(Integer.class) || ExecutionPlanApprovalOperation.class.equals(Long.class) || ExecutionPlanApprovalOperation.class.equals(Float.class) || ExecutionPlanApprovalOperation.class.equals(Double.class) || ExecutionPlanApprovalOperation.class.equals(Boolean.class) || ExecutionPlanApprovalOperation.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((ExecutionPlanApprovalOperation.class.equals(Integer.class) || ExecutionPlanApprovalOperation.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((ExecutionPlanApprovalOperation.class.equals(Float.class) || ExecutionPlanApprovalOperation.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (ExecutionPlanApprovalOperation.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (ExecutionPlanApprovalOperation.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ExecutionPlanApprovalOperation.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'ExecutionPlanApprovalOperation'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'ExecutionPlanApprovalOperation'", e);
            }

            // deserialize ReceiptOperation
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (ReceiptOperation.class.equals(Integer.class) || ReceiptOperation.class.equals(Long.class) || ReceiptOperation.class.equals(Float.class) || ReceiptOperation.class.equals(Double.class) || ReceiptOperation.class.equals(Boolean.class) || ReceiptOperation.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((ReceiptOperation.class.equals(Integer.class) || ReceiptOperation.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((ReceiptOperation.class.equals(Float.class) || ReceiptOperation.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (ReceiptOperation.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (ReceiptOperation.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ReceiptOperation.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'ReceiptOperation'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'ReceiptOperation'", e);
            }

            if (match == 1) {
                OperationStatusOperation ret = new OperationStatusOperation();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(String.format("Failed deserialization for OperationStatusOperation: %d classes match result, expected 1", match));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public OperationStatusOperation getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "OperationStatusOperation cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<>();

    public OperationStatusOperation() {
        super("oneOf", Boolean.FALSE);
    }

    public OperationStatusOperation(CreateAssetOperation o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public OperationStatusOperation(DepositOperation o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public OperationStatusOperation(EmptyOperation o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public OperationStatusOperation(ExecutionPlanApprovalOperation o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public OperationStatusOperation(ReceiptOperation o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("CreateAssetOperation", CreateAssetOperation.class);
        schemas.put("DepositOperation", DepositOperation.class);
        schemas.put("EmptyOperation", EmptyOperation.class);
        schemas.put("ExecutionPlanApprovalOperation", ExecutionPlanApprovalOperation.class);
        schemas.put("ReceiptOperation", ReceiptOperation.class);
        JSON.registerDescendants(OperationStatusOperation.class, Collections.unmodifiableMap(schemas));
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return OperationStatusOperation.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * CreateAssetOperation, DepositOperation, EmptyOperation, ExecutionPlanApprovalOperation, ReceiptOperation
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(CreateAssetOperation.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(DepositOperation.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(EmptyOperation.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(ExecutionPlanApprovalOperation.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(ReceiptOperation.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be CreateAssetOperation, DepositOperation, EmptyOperation, ExecutionPlanApprovalOperation, ReceiptOperation");
    }

    /**
     * Get the actual instance, which can be the following:
     * CreateAssetOperation, DepositOperation, EmptyOperation, ExecutionPlanApprovalOperation, ReceiptOperation
     *
     * @return The actual instance (CreateAssetOperation, DepositOperation, EmptyOperation, ExecutionPlanApprovalOperation, ReceiptOperation)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `CreateAssetOperation`. If the actual instance is not `CreateAssetOperation`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CreateAssetOperation`
     * @throws ClassCastException if the instance is not `CreateAssetOperation`
     */
    public CreateAssetOperation getCreateAssetOperation() throws ClassCastException {
        return (CreateAssetOperation)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DepositOperation`. If the actual instance is not `DepositOperation`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DepositOperation`
     * @throws ClassCastException if the instance is not `DepositOperation`
     */
    public DepositOperation getDepositOperation() throws ClassCastException {
        return (DepositOperation)super.getActualInstance();
    }

    /**
     * Get the actual instance of `EmptyOperation`. If the actual instance is not `EmptyOperation`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EmptyOperation`
     * @throws ClassCastException if the instance is not `EmptyOperation`
     */
    public EmptyOperation getEmptyOperation() throws ClassCastException {
        return (EmptyOperation)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ExecutionPlanApprovalOperation`. If the actual instance is not `ExecutionPlanApprovalOperation`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ExecutionPlanApprovalOperation`
     * @throws ClassCastException if the instance is not `ExecutionPlanApprovalOperation`
     */
    public ExecutionPlanApprovalOperation getExecutionPlanApprovalOperation() throws ClassCastException {
        return (ExecutionPlanApprovalOperation)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ReceiptOperation`. If the actual instance is not `ReceiptOperation`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ReceiptOperation`
     * @throws ClassCastException if the instance is not `ReceiptOperation`
     */
    public ReceiptOperation getReceiptOperation() throws ClassCastException {
        return (ReceiptOperation)super.getActualInstance();
    }



  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    if (getActualInstance() instanceof CreateAssetOperation) {
        if (getActualInstance() != null) {
          joiner.add(((CreateAssetOperation)getActualInstance()).toUrlQueryString(prefix + "one_of_0" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof DepositOperation) {
        if (getActualInstance() != null) {
          joiner.add(((DepositOperation)getActualInstance()).toUrlQueryString(prefix + "one_of_1" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof ReceiptOperation) {
        if (getActualInstance() != null) {
          joiner.add(((ReceiptOperation)getActualInstance()).toUrlQueryString(prefix + "one_of_2" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof EmptyOperation) {
        if (getActualInstance() != null) {
          joiner.add(((EmptyOperation)getActualInstance()).toUrlQueryString(prefix + "one_of_3" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof ExecutionPlanApprovalOperation) {
        if (getActualInstance() != null) {
          joiner.add(((ExecutionPlanApprovalOperation)getActualInstance()).toUrlQueryString(prefix + "one_of_4" + suffix));
        }
        return joiner.toString();
    }
    return null;
  }

}

