/*
 * Ledger Adapter Specification
 * This is the API specification for the Ledger Adapter with whom the FinP2P Router will interact in order to execute and query the underlying implementation.
 *
 * The version of the OpenAPI document: x.x.x
 * Contact: support@ownera.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.ownera.ledger.adapter.api.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import java.util.Locale;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.ownera.ledger.adapter.api.model.OperationMetadata;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import io.ownera.ledger.adapter.api.ApiClient;
/**
 * OperationBase
 */
@JsonPropertyOrder({
  OperationBase.JSON_PROPERTY_CID,
  OperationBase.JSON_PROPERTY_IS_COMPLETED,
  OperationBase.JSON_PROPERTY_OPERATION_METADATA
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-27T09:27:05.154160+02:00[Asia/Jerusalem]", comments = "Generator version: 7.16.0")
public class OperationBase {
  public static final String JSON_PROPERTY_CID = "cid";
  @javax.annotation.Nonnull
  private String cid;

  public static final String JSON_PROPERTY_IS_COMPLETED = "isCompleted";
  @javax.annotation.Nonnull
  private Boolean isCompleted = false;

  public static final String JSON_PROPERTY_OPERATION_METADATA = "operationMetadata";
  @javax.annotation.Nullable
  private OperationMetadata operationMetadata;

  public OperationBase() { 
  }

  public OperationBase cid(@javax.annotation.Nonnull String cid) {
    this.cid = cid;
    return this;
  }

  /**
   * unique correlation id which identify the operation
   * @return cid
   */
  @javax.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_CID, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getCid() {
    return cid;
  }


  @JsonProperty(value = JSON_PROPERTY_CID, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCid(@javax.annotation.Nonnull String cid) {
    this.cid = cid;
  }


  public OperationBase isCompleted(@javax.annotation.Nonnull Boolean isCompleted) {
    this.isCompleted = isCompleted;
    return this;
  }

  /**
   * flag indicating if the operation completed, if true then error or response must be present (but not both)
   * @return isCompleted
   */
  @javax.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_IS_COMPLETED, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getIsCompleted() {
    return isCompleted;
  }


  @JsonProperty(value = JSON_PROPERTY_IS_COMPLETED, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsCompleted(@javax.annotation.Nonnull Boolean isCompleted) {
    this.isCompleted = isCompleted;
  }


  public OperationBase operationMetadata(@javax.annotation.Nullable OperationMetadata operationMetadata) {
    this.operationMetadata = operationMetadata;
    return this;
  }

  /**
   * Get operationMetadata
   * @return operationMetadata
   */
  @javax.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_OPERATION_METADATA, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OperationMetadata getOperationMetadata() {
    return operationMetadata;
  }


  @JsonProperty(value = JSON_PROPERTY_OPERATION_METADATA, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOperationMetadata(@javax.annotation.Nullable OperationMetadata operationMetadata) {
    this.operationMetadata = operationMetadata;
  }


  /**
   * Return true if this OperationBase object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OperationBase operationBase = (OperationBase) o;
    return Objects.equals(this.cid, operationBase.cid) &&
        Objects.equals(this.isCompleted, operationBase.isCompleted) &&
        Objects.equals(this.operationMetadata, operationBase.operationMetadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cid, isCompleted, operationMetadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OperationBase {\n");
    sb.append("    cid: ").append(toIndentedString(cid)).append("\n");
    sb.append("    isCompleted: ").append(toIndentedString(isCompleted)).append("\n");
    sb.append("    operationMetadata: ").append(toIndentedString(operationMetadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `cid` to the URL query string
    if (getCid() != null) {
      joiner.add(String.format(Locale.ROOT, "%scid%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCid()))));
    }

    // add `isCompleted` to the URL query string
    if (getIsCompleted() != null) {
      joiner.add(String.format(Locale.ROOT, "%sisCompleted%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getIsCompleted()))));
    }

    // add `operationMetadata` to the URL query string
    if (getOperationMetadata() != null) {
      joiner.add(getOperationMetadata().toUrlQueryString(prefix + "operationMetadata" + suffix));
    }

    return joiner.toString();
  }
}

