/*
 * Ledger Adapter Specification
 * This is the API specification for the Ledger Adapter with whom the FinP2P Router will interact in order to execute and query the underlying implementation.
 *
 * The version of the OpenAPI document: x.x.x
 * Contact: support@ownera.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.ownera.ledger.adapter.api.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import java.util.Locale;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.ownera.ledger.adapter.api.model.APIPaymentMethodMethodInstruction;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import io.ownera.ledger.adapter.api.ApiClient;
/**
 * APIPaymentMethod
 */
@JsonPropertyOrder({
  APIPaymentMethod.JSON_PROPERTY_DESCRIPTION,
  APIPaymentMethod.JSON_PROPERTY_CURRENCY,
  APIPaymentMethod.JSON_PROPERTY_METHOD_INSTRUCTION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-29T09:36:31.082697+02:00[Asia/Jerusalem]", comments = "Generator version: 7.16.0")
public class APIPaymentMethod {
  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @javax.annotation.Nonnull
  private String description;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  @javax.annotation.Nonnull
  private String currency;

  public static final String JSON_PROPERTY_METHOD_INSTRUCTION = "methodInstruction";
  @javax.annotation.Nonnull
  private APIPaymentMethodMethodInstruction methodInstruction;

  public APIPaymentMethod() { 
  }

  public APIPaymentMethod description(@javax.annotation.Nonnull String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_DESCRIPTION, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getDescription() {
    return description;
  }


  @JsonProperty(value = JSON_PROPERTY_DESCRIPTION, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDescription(@javax.annotation.Nonnull String description) {
    this.description = description;
  }


  public APIPaymentMethod currency(@javax.annotation.Nonnull String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * accepted currency for payment
   * @return currency
   */
  @javax.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_CURRENCY, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getCurrency() {
    return currency;
  }


  @JsonProperty(value = JSON_PROPERTY_CURRENCY, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCurrency(@javax.annotation.Nonnull String currency) {
    this.currency = currency;
  }


  public APIPaymentMethod methodInstruction(@javax.annotation.Nonnull APIPaymentMethodMethodInstruction methodInstruction) {
    this.methodInstruction = methodInstruction;
    return this;
  }

  /**
   * Get methodInstruction
   * @return methodInstruction
   */
  @javax.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_METHOD_INSTRUCTION, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public APIPaymentMethodMethodInstruction getMethodInstruction() {
    return methodInstruction;
  }


  @JsonProperty(value = JSON_PROPERTY_METHOD_INSTRUCTION, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMethodInstruction(@javax.annotation.Nonnull APIPaymentMethodMethodInstruction methodInstruction) {
    this.methodInstruction = methodInstruction;
  }


  /**
   * Return true if this paymentMethod object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIPaymentMethod paymentMethod = (APIPaymentMethod) o;
    return Objects.equals(this.description, paymentMethod.description) &&
        Objects.equals(this.currency, paymentMethod.currency) &&
        Objects.equals(this.methodInstruction, paymentMethod.methodInstruction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, currency, methodInstruction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIPaymentMethod {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    methodInstruction: ").append(toIndentedString(methodInstruction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `description` to the URL query string
    if (getDescription() != null) {
      joiner.add(String.format(Locale.ROOT, "%sdescription%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDescription()))));
    }

    // add `currency` to the URL query string
    if (getCurrency() != null) {
      joiner.add(String.format(Locale.ROOT, "%scurrency%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCurrency()))));
    }

    // add `methodInstruction` to the URL query string
    if (getMethodInstruction() != null) {
      joiner.add(getMethodInstruction().toUrlQueryString(prefix + "methodInstruction" + suffix));
    }

    return joiner.toString();
  }
}

