/*
 * Ledger Adapter Specification
 * This is the API specification for the Ledger Adapter with whom the FinP2P node will interact in order to execute and query the underlying implementation.
 *
 * The version of the OpenAPI document: x.x.x
 * Contact: support@ownera.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.ownera.ledger.adapter.api.api;

import io.ownera.ledger.adapter.api.ApiClient;
import io.ownera.ledger.adapter.api.ApiException;
import io.ownera.ledger.adapter.api.ApiResponse;
import io.ownera.ledger.adapter.api.Pair;

import io.ownera.ledger.adapter.api.model.HoldOperationRequest;
import io.ownera.ledger.adapter.api.model.HoldOperationResponse;
import io.ownera.ledger.adapter.api.model.ReleaseOperationRequest;
import io.ownera.ledger.adapter.api.model.ReleaseOperationResponse;
import io.ownera.ledger.adapter.api.model.RollbackOperationRequest;
import io.ownera.ledger.adapter.api.model.RollbackOperationResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-23T11:29:49.092442+03:00[Asia/Jerusalem]", comments = "Generator version: 7.9.0")
public class EscrowApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public EscrowApi() {
    this(new ApiClient());
  }

  public EscrowApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Hold Asset
   * Hold the owner asset
   * @param idempotencyKey hex encoding of a 32-byte payload consisting of 24 random bytes + 8-byte epoch timestamp (seconds) (required)
   * @param holdOperationRequest  (optional)
   * @return HoldOperationResponse
   * @throws ApiException if fails to make API call
   */
  public HoldOperationResponse holdOperation(String idempotencyKey, HoldOperationRequest holdOperationRequest) throws ApiException {
    ApiResponse<HoldOperationResponse> localVarResponse = holdOperationWithHttpInfo(idempotencyKey, holdOperationRequest);
    return localVarResponse.getData();
  }

  /**
   * Hold Asset
   * Hold the owner asset
   * @param idempotencyKey hex encoding of a 32-byte payload consisting of 24 random bytes + 8-byte epoch timestamp (seconds) (required)
   * @param holdOperationRequest  (optional)
   * @return ApiResponse&lt;HoldOperationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<HoldOperationResponse> holdOperationWithHttpInfo(String idempotencyKey, HoldOperationRequest holdOperationRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = holdOperationRequestBuilder(idempotencyKey, holdOperationRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("holdOperation", localVarResponse);
        }
        return new ApiResponse<HoldOperationResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<HoldOperationResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder holdOperationRequestBuilder(String idempotencyKey, HoldOperationRequest holdOperationRequest) throws ApiException {
    // verify the required parameter 'idempotencyKey' is set
    if (idempotencyKey == null) {
      throw new ApiException(400, "Missing the required parameter 'idempotencyKey' when calling holdOperation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/assets/hold";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (idempotencyKey != null) {
      localVarRequestBuilder.header("Idempotency-Key", idempotencyKey.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(holdOperationRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Release Asset
   * Release held assets
   * @param idempotencyKey hex encoding of a 32-byte payload consisting of 24 random bytes + 8-byte epoch timestamp (seconds) (required)
   * @param releaseOperationRequest  (optional)
   * @return ReleaseOperationResponse
   * @throws ApiException if fails to make API call
   */
  public ReleaseOperationResponse releaseOperation(String idempotencyKey, ReleaseOperationRequest releaseOperationRequest) throws ApiException {
    ApiResponse<ReleaseOperationResponse> localVarResponse = releaseOperationWithHttpInfo(idempotencyKey, releaseOperationRequest);
    return localVarResponse.getData();
  }

  /**
   * Release Asset
   * Release held assets
   * @param idempotencyKey hex encoding of a 32-byte payload consisting of 24 random bytes + 8-byte epoch timestamp (seconds) (required)
   * @param releaseOperationRequest  (optional)
   * @return ApiResponse&lt;ReleaseOperationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ReleaseOperationResponse> releaseOperationWithHttpInfo(String idempotencyKey, ReleaseOperationRequest releaseOperationRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = releaseOperationRequestBuilder(idempotencyKey, releaseOperationRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("releaseOperation", localVarResponse);
        }
        return new ApiResponse<ReleaseOperationResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ReleaseOperationResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder releaseOperationRequestBuilder(String idempotencyKey, ReleaseOperationRequest releaseOperationRequest) throws ApiException {
    // verify the required parameter 'idempotencyKey' is set
    if (idempotencyKey == null) {
      throw new ApiException(400, "Missing the required parameter 'idempotencyKey' when calling releaseOperation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/assets/release";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (idempotencyKey != null) {
      localVarRequestBuilder.header("Idempotency-Key", idempotencyKey.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(releaseOperationRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Rollback held asset
   * Release back held asset to the owner
   * @param idempotencyKey hex encoding of a 32-byte payload consisting of 24 random bytes + 8-byte epoch timestamp (seconds) (required)
   * @param rollbackOperationRequest  (optional)
   * @return RollbackOperationResponse
   * @throws ApiException if fails to make API call
   */
  public RollbackOperationResponse rollbackOperation(String idempotencyKey, RollbackOperationRequest rollbackOperationRequest) throws ApiException {
    ApiResponse<RollbackOperationResponse> localVarResponse = rollbackOperationWithHttpInfo(idempotencyKey, rollbackOperationRequest);
    return localVarResponse.getData();
  }

  /**
   * Rollback held asset
   * Release back held asset to the owner
   * @param idempotencyKey hex encoding of a 32-byte payload consisting of 24 random bytes + 8-byte epoch timestamp (seconds) (required)
   * @param rollbackOperationRequest  (optional)
   * @return ApiResponse&lt;RollbackOperationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RollbackOperationResponse> rollbackOperationWithHttpInfo(String idempotencyKey, RollbackOperationRequest rollbackOperationRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = rollbackOperationRequestBuilder(idempotencyKey, rollbackOperationRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("rollbackOperation", localVarResponse);
        }
        return new ApiResponse<RollbackOperationResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RollbackOperationResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder rollbackOperationRequestBuilder(String idempotencyKey, RollbackOperationRequest rollbackOperationRequest) throws ApiException {
    // verify the required parameter 'idempotencyKey' is set
    if (idempotencyKey == null) {
      throw new ApiException(400, "Missing the required parameter 'idempotencyKey' when calling rollbackOperation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/assets/rollback";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (idempotencyKey != null) {
      localVarRequestBuilder.header("Idempotency-Key", idempotencyKey.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(rollbackOperationRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
