/*
 * Ledger Adapter Specification
 * This is the API specification for the Ledger Adapter with whom the FinP2P Router will interact in order to execute and query the underlying implementation.
 *
 * The version of the OpenAPI document: x.x.x
 * Contact: support@ownera.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.ownera.ledger.adapter.api.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import java.util.Locale;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.ownera.ledger.adapter.api.model.APIDestination;
import io.ownera.ledger.adapter.api.model.APIPayoutAsset;
import io.ownera.ledger.adapter.api.model.APIPayoutInstruction;
import io.ownera.ledger.adapter.api.model.APISignature;
import io.ownera.ledger.adapter.api.model.APISource;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import io.ownera.ledger.adapter.api.ApiClient;
/**
 * APIPayoutRequest
 */
@JsonPropertyOrder({
  APIPayoutRequest.JSON_PROPERTY_SOURCE,
  APIPayoutRequest.JSON_PROPERTY_DESTINATION,
  APIPayoutRequest.JSON_PROPERTY_QUANTITY,
  APIPayoutRequest.JSON_PROPERTY_PAYOUT_INSTRUCTION,
  APIPayoutRequest.JSON_PROPERTY_ASSET,
  APIPayoutRequest.JSON_PROPERTY_NONCE,
  APIPayoutRequest.JSON_PROPERTY_SIGNATURE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-28T10:24:19.848612+02:00[Asia/Jerusalem]", comments = "Generator version: 7.16.0")
public class APIPayoutRequest {
  public static final String JSON_PROPERTY_SOURCE = "source";
  @javax.annotation.Nonnull
  private APISource source;

  public static final String JSON_PROPERTY_DESTINATION = "destination";
  @javax.annotation.Nullable
  private APIDestination destination;

  public static final String JSON_PROPERTY_QUANTITY = "quantity";
  @javax.annotation.Nonnull
  private String quantity;

  public static final String JSON_PROPERTY_PAYOUT_INSTRUCTION = "payoutInstruction";
  @javax.annotation.Nullable
  private APIPayoutInstruction payoutInstruction;

  public static final String JSON_PROPERTY_ASSET = "asset";
  @javax.annotation.Nonnull
  private APIPayoutAsset asset;

  public static final String JSON_PROPERTY_NONCE = "nonce";
  @javax.annotation.Nullable
  private String nonce;

  public static final String JSON_PROPERTY_SIGNATURE = "signature";
  @javax.annotation.Nullable
  private APISignature signature;

  public APIPayoutRequest() { 
  }

  public APIPayoutRequest source(@javax.annotation.Nonnull APISource source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_SOURCE, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public APISource getSource() {
    return source;
  }


  @JsonProperty(value = JSON_PROPERTY_SOURCE, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSource(@javax.annotation.Nonnull APISource source) {
    this.source = source;
  }


  public APIPayoutRequest destination(@javax.annotation.Nullable APIDestination destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Get destination
   * @return destination
   */
  @javax.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_DESTINATION, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public APIDestination getDestination() {
    return destination;
  }


  @JsonProperty(value = JSON_PROPERTY_DESTINATION, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDestination(@javax.annotation.Nullable APIDestination destination) {
    this.destination = destination;
  }


  public APIPayoutRequest quantity(@javax.annotation.Nonnull String quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * How many units of the asset
   * @return quantity
   */
  @javax.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_QUANTITY, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getQuantity() {
    return quantity;
  }


  @JsonProperty(value = JSON_PROPERTY_QUANTITY, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setQuantity(@javax.annotation.Nonnull String quantity) {
    this.quantity = quantity;
  }


  public APIPayoutRequest payoutInstruction(@javax.annotation.Nullable APIPayoutInstruction payoutInstruction) {
    this.payoutInstruction = payoutInstruction;
    return this;
  }

  /**
   * Get payoutInstruction
   * @return payoutInstruction
   */
  @javax.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_PAYOUT_INSTRUCTION, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public APIPayoutInstruction getPayoutInstruction() {
    return payoutInstruction;
  }


  @JsonProperty(value = JSON_PROPERTY_PAYOUT_INSTRUCTION, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPayoutInstruction(@javax.annotation.Nullable APIPayoutInstruction payoutInstruction) {
    this.payoutInstruction = payoutInstruction;
  }


  public APIPayoutRequest asset(@javax.annotation.Nonnull APIPayoutAsset asset) {
    this.asset = asset;
    return this;
  }

  /**
   * Get asset
   * @return asset
   */
  @javax.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_ASSET, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public APIPayoutAsset getAsset() {
    return asset;
  }


  @JsonProperty(value = JSON_PROPERTY_ASSET, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAsset(@javax.annotation.Nonnull APIPayoutAsset asset) {
    this.asset = asset;
  }


  public APIPayoutRequest nonce(@javax.annotation.Nullable String nonce) {
    this.nonce = nonce;
    return this;
  }

  /**
   * 32 bytes buffer (24 randomly generated bytes by the client + 8 bytes epoch timestamp seconds) encoded to hex:    const nonce &#x3D; Buffer.alloc(32);   nonce.fill(crypto.randomBytes(24), 0, 24);    const nowEpochSeconds &#x3D; Math.floor(new Date().getTime() / 1000);   const t &#x3D; BigInt(nowEpochSeconds);   nonce.writeBigInt64BE(t, 24); 
   * @return nonce
   */
  @javax.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_NONCE, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getNonce() {
    return nonce;
  }


  @JsonProperty(value = JSON_PROPERTY_NONCE, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNonce(@javax.annotation.Nullable String nonce) {
    this.nonce = nonce;
  }


  public APIPayoutRequest signature(@javax.annotation.Nullable APISignature signature) {
    this.signature = signature;
    return this;
  }

  /**
   * Get signature
   * @return signature
   */
  @javax.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_SIGNATURE, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public APISignature getSignature() {
    return signature;
  }


  @JsonProperty(value = JSON_PROPERTY_SIGNATURE, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSignature(@javax.annotation.Nullable APISignature signature) {
    this.signature = signature;
  }


  /**
   * Return true if this PayoutRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIPayoutRequest payoutRequest = (APIPayoutRequest) o;
    return Objects.equals(this.source, payoutRequest.source) &&
        Objects.equals(this.destination, payoutRequest.destination) &&
        Objects.equals(this.quantity, payoutRequest.quantity) &&
        Objects.equals(this.payoutInstruction, payoutRequest.payoutInstruction) &&
        Objects.equals(this.asset, payoutRequest.asset) &&
        Objects.equals(this.nonce, payoutRequest.nonce) &&
        Objects.equals(this.signature, payoutRequest.signature);
  }

  @Override
  public int hashCode() {
    return Objects.hash(source, destination, quantity, payoutInstruction, asset, nonce, signature);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIPayoutRequest {\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    payoutInstruction: ").append(toIndentedString(payoutInstruction)).append("\n");
    sb.append("    asset: ").append(toIndentedString(asset)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `source` to the URL query string
    if (getSource() != null) {
      joiner.add(getSource().toUrlQueryString(prefix + "source" + suffix));
    }

    // add `destination` to the URL query string
    if (getDestination() != null) {
      joiner.add(getDestination().toUrlQueryString(prefix + "destination" + suffix));
    }

    // add `quantity` to the URL query string
    if (getQuantity() != null) {
      joiner.add(String.format(Locale.ROOT, "%squantity%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getQuantity()))));
    }

    // add `payoutInstruction` to the URL query string
    if (getPayoutInstruction() != null) {
      joiner.add(getPayoutInstruction().toUrlQueryString(prefix + "payoutInstruction" + suffix));
    }

    // add `asset` to the URL query string
    if (getAsset() != null) {
      joiner.add(getAsset().toUrlQueryString(prefix + "asset" + suffix));
    }

    // add `nonce` to the URL query string
    if (getNonce() != null) {
      joiner.add(String.format(Locale.ROOT, "%snonce%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getNonce()))));
    }

    // add `signature` to the URL query string
    if (getSignature() != null) {
      joiner.add(getSignature().toUrlQueryString(prefix + "signature" + suffix));
    }

    return joiner.toString();
  }
}

