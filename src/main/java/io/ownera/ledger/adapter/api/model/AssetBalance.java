/*
 * Ledger Adapter Specification
 * This is the API specification for the Ledger Adapter with whom the FinP2P Router will interact in order to execute and query the underlying implementation.
 *
 * The version of the OpenAPI document: x.x.x
 * Contact: support@ownera.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.ownera.ledger.adapter.api.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import java.util.Locale;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.ownera.ledger.adapter.api.model.Asset;
import io.ownera.ledger.adapter.api.model.Receipt;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import io.ownera.ledger.adapter.api.ApiClient;
/**
 * AssetBalance
 */
@JsonPropertyOrder({
  AssetBalance.JSON_PROPERTY_ASSET,
  AssetBalance.JSON_PROPERTY_CURRENT,
  AssetBalance.JSON_PROPERTY_AVAILABLE,
  AssetBalance.JSON_PROPERTY_HELD,
  AssetBalance.JSON_PROPERTY_RECEIPTS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-27T09:27:05.154160+02:00[Asia/Jerusalem]", comments = "Generator version: 7.16.0")
public class AssetBalance {
  public static final String JSON_PROPERTY_ASSET = "asset";
  @javax.annotation.Nonnull
  private Asset asset;

  public static final String JSON_PROPERTY_CURRENT = "current";
  @javax.annotation.Nonnull
  private String current;

  public static final String JSON_PROPERTY_AVAILABLE = "available";
  @javax.annotation.Nonnull
  private String available;

  public static final String JSON_PROPERTY_HELD = "held";
  @javax.annotation.Nonnull
  private String held;

  public static final String JSON_PROPERTY_RECEIPTS = "receipts";
  @javax.annotation.Nullable
  private List<Receipt> receipts = new ArrayList<>();

  public AssetBalance() { 
  }

  public AssetBalance asset(@javax.annotation.Nonnull Asset asset) {
    this.asset = asset;
    return this;
  }

  /**
   * Get asset
   * @return asset
   */
  @javax.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_ASSET, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Asset getAsset() {
    return asset;
  }


  @JsonProperty(value = JSON_PROPERTY_ASSET, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAsset(@javax.annotation.Nonnull Asset asset) {
    this.asset = asset;
  }


  public AssetBalance current(@javax.annotation.Nonnull String current) {
    this.current = current;
    return this;
  }

  /**
   * The total amount currently in or owed by the account
   * @return current
   */
  @javax.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_CURRENT, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getCurrent() {
    return current;
  }


  @JsonProperty(value = JSON_PROPERTY_CURRENT, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCurrent(@javax.annotation.Nonnull String current) {
    this.current = current;
  }


  public AssetBalance available(@javax.annotation.Nonnull String available) {
    this.available = available;
    return this;
  }

  /**
   * The amount immediately usable from the account
   * @return available
   */
  @javax.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_AVAILABLE, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getAvailable() {
    return available;
  }


  @JsonProperty(value = JSON_PROPERTY_AVAILABLE, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAvailable(@javax.annotation.Nonnull String available) {
    this.available = available;
  }


  public AssetBalance held(@javax.annotation.Nonnull String held) {
    this.held = held;
    return this;
  }

  /**
   * The amount pending or on hold within the account
   * @return held
   */
  @javax.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_HELD, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getHeld() {
    return held;
  }


  @JsonProperty(value = JSON_PROPERTY_HELD, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHeld(@javax.annotation.Nonnull String held) {
    this.held = held;
  }


  public AssetBalance receipts(@javax.annotation.Nullable List<Receipt> receipts) {
    this.receipts = receipts;
    return this;
  }

  public AssetBalance addReceiptsItem(Receipt receiptsItem) {
    if (this.receipts == null) {
      this.receipts = new ArrayList<>();
    }
    this.receipts.add(receiptsItem);
    return this;
  }

  /**
   * list of receipt associated with the balance info
   * @return receipts
   */
  @javax.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_RECEIPTS, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<Receipt> getReceipts() {
    return receipts;
  }


  @JsonProperty(value = JSON_PROPERTY_RECEIPTS, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReceipts(@javax.annotation.Nullable List<Receipt> receipts) {
    this.receipts = receipts;
  }


  /**
   * Return true if this assetBalance object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetBalance assetBalance = (AssetBalance) o;
    return Objects.equals(this.asset, assetBalance.asset) &&
        Objects.equals(this.current, assetBalance.current) &&
        Objects.equals(this.available, assetBalance.available) &&
        Objects.equals(this.held, assetBalance.held) &&
        Objects.equals(this.receipts, assetBalance.receipts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asset, current, available, held, receipts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetBalance {\n");
    sb.append("    asset: ").append(toIndentedString(asset)).append("\n");
    sb.append("    current: ").append(toIndentedString(current)).append("\n");
    sb.append("    available: ").append(toIndentedString(available)).append("\n");
    sb.append("    held: ").append(toIndentedString(held)).append("\n");
    sb.append("    receipts: ").append(toIndentedString(receipts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `asset` to the URL query string
    if (getAsset() != null) {
      joiner.add(getAsset().toUrlQueryString(prefix + "asset" + suffix));
    }

    // add `current` to the URL query string
    if (getCurrent() != null) {
      joiner.add(String.format(Locale.ROOT, "%scurrent%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCurrent()))));
    }

    // add `available` to the URL query string
    if (getAvailable() != null) {
      joiner.add(String.format(Locale.ROOT, "%savailable%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAvailable()))));
    }

    // add `held` to the URL query string
    if (getHeld() != null) {
      joiner.add(String.format(Locale.ROOT, "%sheld%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getHeld()))));
    }

    // add `receipts` to the URL query string
    if (getReceipts() != null) {
      for (int i = 0; i < getReceipts().size(); i++) {
        if (getReceipts().get(i) != null) {
          joiner.add(getReceipts().get(i).toUrlQueryString(String.format(Locale.ROOT, "%sreceipts%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format(Locale.ROOT, "%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }
}

